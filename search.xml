<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>电脑开机黑屏的解决方法</title>
      <link href="/2019/11/15/%E7%94%B5%E8%84%91%E5%BC%80%E6%9C%BA%E9%BB%91%E5%B1%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/11/15/%E7%94%B5%E8%84%91%E5%BC%80%E6%9C%BA%E9%BB%91%E5%B1%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="电脑开机后就黑屏-只有鼠标箭头-其他啥都不看见"><a href="#电脑开机后就黑屏-只有鼠标箭头-其他啥都不看见" class="headerlink" title="电脑开机后就黑屏 只有鼠标箭头 其他啥都不看见"></a>电脑开机后就黑屏 只有鼠标箭头 其他啥都不看见</h1><p>这是刚刚遇到的一个问题，记录下来，免得忘掉。</p><h2 id="原因：explorer的进程没有启动"><a href="#原因：explorer的进程没有启动" class="headerlink" title="原因：explorer的进程没有启动"></a>原因：explorer的进程没有启动</h2><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>按“ctrl+shift+esc”打开任务管理器</li><li>查看“进程”选项中是否有explorer.exe，有的话，结束进程；没有的话，就不用管了。</li><li>点击左上角的“文件”打开菜单，选择“新建任务（运行）”</li><li>在弹出的“新建新任务”窗口，输入<strong>explorer.exe</strong>，然后点击确定，问题就解决了。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建属于自己的博客</title>
      <link href="/2019/11/15/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/15/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>这是我的第一篇文章，将从两个方面说明如何利用github与hexo搭建属于自己的静态博客。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目的：1.防止遗忘 2.整理学习过程 3.锻炼表达能力<br>手段：依靠写作输出。</p><p>今天是2019年11月5日，这是我第二次搭建博客，第一个被我删掉了，原本以为这次会很快很简单，<br>结果还是遇到了一些问题，现将整个过程加以整理成文。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>一、搭建博客（只写整个的方法跟大步骤，具体细节可搜索相关知识点完成）<br>1.首先需要安装node.js与git<br>2.github创建项目，名字一定要以.github.io为后缀<br>3.本地创建文件夹，安装hexo<br>4.连接github与本地已创建项目</p><p>二、个性化设置（主要针对更换主题）<br>根据项目在github的教程更改即可。<br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">点击这里</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>异常</title>
      <link href="/2019/11/15/%E5%BC%82%E5%B8%B8/"/>
      <url>/2019/11/15/%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="打开ssr时，抛出异常-gt-system-exception-端口已被占用1080-的解决方案"><a href="#打开ssr时，抛出异常-gt-system-exception-端口已被占用1080-的解决方案" class="headerlink" title="打开ssr时，抛出异常&gt;system.exception:端口已被占用1080 的解决方案"></a>打开ssr时，抛出异常&gt;system.exception:端口已被占用1080 的解决方案</h1><h2 id="思路：找出是哪个程序占用了1080，然后关掉即可。"><a href="#思路：找出是哪个程序占用了1080，然后关掉即可。" class="headerlink" title="思路：找出是哪个程序占用了1080，然后关掉即可。"></a>思路：找出是哪个程序占用了1080，然后关掉即可。</h2><p>打开cmd，在里面运行命令</p><pre><code>netstat -aon|findstr &quot;1080&quot;</code></pre><p>然后占用的程序就出来了,如本次我运行命令后的结果如下</p><blockquote><p>TCP    127.0.0.1:1080         127.0.0.1:1521         ESTABLISHED     9528<br>TCP    127.0.0.1:1521         127.0.0.1:1080         ESTABLISHED     5532</p></blockquote><p>再运行命令</p><pre><code>tasklist|findstr &quot;5532&quot;</code></pre><p>得到</p><blockquote><p>TNSLSNR.EXE                   5532 Services                   0     14,348 K</p></blockquote><p>然后利用快捷键ctrl+shift+esc打开任务管理器，在【详细信息】处找到TNSLSNR.EXE 关掉即可</p><p>比如上面占用的程序有两个，那么两个就都要关掉<br>接着运行命令</p><pre><code>tasklist|findstr &quot;9528&quot;</code></pre><p>得到</p><blockquote><p>emagent.exe                   9528 Services                   0     26,880 K</p></blockquote><p>然后利用快捷键ctrl+shift+esc打开任务管理器，在【详细信息】处找到emagent.exe 关掉即可</p><p>然后再重新打开ssr，即可正常使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Travis自动部署</title>
      <link href="/2019/11/15/Travis%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/11/15/Travis%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="利用Travis-CI实现博客的自动部署"><a href="#利用Travis-CI实现博客的自动部署" class="headerlink" title="利用Travis CI实现博客的自动部署"></a>利用Travis CI实现博客的自动部署</h1><p>操作之前看了网上的教程，原本以为会很快搞定，结果还是折腾了好久。有关具体部署的步骤网上有很多文章，我把我踩雷的一些注意点记录一下。</p><h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><ul><li>设置好github，为的是告知Travis CI发生的变化</li><li>设置Travis CI，将构建好的文章部署到GitHub pages</li><li>连接github与Travis CI，这两者之间是如何通信的，互相如何通知的</li></ul><hr><p>两者之间要想实现通信，主要通过配置文件，解析配置文件时会”教”他们如何操作</p><hr><h3 id="第一步：获取-GitHub-Personal-Access-Token"><a href="#第一步：获取-GitHub-Personal-Access-Token" class="headerlink" title="第一步：获取 GitHub Personal Access Token"></a>第一步：获取 GitHub Personal Access Token</h3><p>点击 Github 用户settings页面 最下方的 Developer setting ，然后选择 Personal access tokens 来生成一个新的token。</p><p><strong>注意：</strong> </p><ol><li>generate new token时，token的名字可以随便起，但是要记住，因为后面要用。</li><li>select scopes时只勾选repo即可（下面的四个子选项就会自动选择），其他不勾选。然后点击generate token即可。</li><li>生成的token一定要记在某个地方，比如我把token发到自己微信了，算是备份，因为后面要用到，不然刷新后，token就不能再看了，只会显示刚才创建token时生成的名字，就还得重新生成一遍。</li></ol><h3 id="第二步：Travis-CI相关的配置"><a href="#第二步：Travis-CI相关的配置" class="headerlink" title="第二步：Travis CI相关的配置"></a>第二步：Travis CI相关的配置</h3><p>主要包括两部分：环境变量配置与.travis.yml文件的修改</p><p>公有仓库使用<a href="https://travis-ci.org/" target="_blank" rel="noopener">https://travis-ci.org/</a>进行操作，私有仓库需要使用收费的<a href="https://travis-ci.com/" target="_blank" rel="noopener">https://travis-ci.com/</a></p><p><strong>配置环境变量</strong></p><p>在Legacy Services Integration里面打开yimin417.github.io这个仓库，然后到settings里面设置，其他选项保持默认即可，除了在Environment Variables里面添加如下：<br>name  添加你前面在github里面创建的token名<br>value 添加在github里面生成的token<br>然后保存就好</p><p><strong>配置.travis.yml文件</strong></p><p>#指定构建环境是Node.js，当前版本是稳定版</p><pre><code>language: node_jsnode_js: stable</code></pre><p>#设置缓存文件</p><pre><code>cache:  directories:    - node_modules</code></pre><p>#设置钩子只检测blog-source分支的push变动</p><pre><code>branches:  only:    - sourcode</code></pre><p>#在构建之前安装hexo环境</p><pre><code>before_install:   - npm install -g hexo-cli</code></pre><p>#安装git插件和搜索功能插件</p><pre><code>install: - npm install  - npm install hexo-deployer-git --save</code></pre><p>#执行清缓存，生成网页操作</p><pre><code>script:  - hexo clean  - hexo generate</code></pre><p>#设置git提交名，邮箱；替换真实token到_config.yml文件</p><pre><code>after_script:  - git config user.name &quot;yimin417&quot;  - git config user.email &quot;1414876235@qq.com&quot;#替换同目录下的_config.yml文件中github_token字符串为travis后台刚才配置的变量，注&gt;意此处sed命令用了双引号。单引号无效！  - sed -i &quot;s/access_token/${ACCESS_TOKEN}/g&quot;./_config.yml  - hexo deploy</code></pre><h3 id="第三步：对配置文件-config-yml修改"><a href="#第三步：对配置文件-config-yml修改" class="headerlink" title="第三步：对配置文件_config.yml修改"></a>第三步：对配置文件_config.yml修改</h3><p>只修改最后</p><pre><code>deploy:  type: git  repository: https://access_token@github.com/yimin417/yimin417.github.io  branch: master</code></pre><p>#这里面的branch是写博客的分支</p><p><em>注：博客源代码在新创建的分支sourcode下</em></p><p>然后，所有的配置就完成了。</p><h2 id="git提交相关命令及问题说明"><a href="#git提交相关命令及问题说明" class="headerlink" title="git提交相关命令及问题说明"></a>git提交相关命令及问题说明</h2><ol><li>git checkout 分支名  切换分支</li><li>git checkout -b 分支名 首先创建分支然后再切换到新建分支上</li><li>push时提交到的是存放博客源码的分支，因为Travis监听的是这个分支的变化，我的该分支是sourcode</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何克隆仓库及所有分支</title>
      <link href="/2019/11/15/%E5%A6%82%E4%BD%95%E5%85%8B%E9%9A%86%E4%BB%93%E5%BA%93%E5%8F%8A%E6%89%80%E6%9C%89%E5%88%86%E6%94%AF/"/>
      <url>/2019/11/15/%E5%A6%82%E4%BD%95%E5%85%8B%E9%9A%86%E4%BB%93%E5%BA%93%E5%8F%8A%E6%89%80%E6%9C%89%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="如何从github上克隆仓库及其所有的分支"><a href="#如何从github上克隆仓库及其所有的分支" class="headerlink" title="如何从github上克隆仓库及其所有的分支"></a>如何从github上克隆仓库及其所有的分支</h1><h2 id="适用情况：重新部署或者换电脑等"><a href="#适用情况：重新部署或者换电脑等" class="headerlink" title="适用情况：重新部署或者换电脑等"></a>适用情况：重新部署或者换电脑等</h2><ul><li><p>克隆仓库（实际上已经包含master分支）<br><code>git clone 要克隆的仓库地址</code></p></li><li><p>查看已克隆仓库有多少个分支<br><code>git branch -a</code></p></li><li><p>然后创建除master分支以外的其他分支，并且切换到该分支，<br>然后该分支对应的文件也就下载好了<br><code>git checkout -b 其他分支名 origin/其他分支名</code></p><p>-b后面的其他分支名可以省掉</p></li></ul><h2 id="hexo-g等命令没反应，返回usage"><a href="#hexo-g等命令没反应，返回usage" class="headerlink" title="hexo g等命令没反应，返回usage"></a>hexo g等命令没反应，返回usage</h2><p>解决方案：<br><code>npm install hexo --save</code></p><p><strong>所有的提交都是在源码分支上</strong></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
